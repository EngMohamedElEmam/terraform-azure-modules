#########################
#Resource Group Modules #
#########################

# Create resource groups
module "network-rg" {
  source   = "./ResourceGroup"
  rg_name  = "network"
  location = "East US"
}

module "databases-rg" {
  source   = "./ResourceGroup"
  rg_name  = "databases"
  location = "East US"
}

module "storage-rg" {
  source   = "./ResourceGroup"
  rg_name  = "storage"
  location = "East US"
}

module "platform-rg" {
  source   = "./ResourceGroup"
  rg_name  = "platform-services"
  location = "East US"
}

module "aks-rg" {
  source   = "./ResourceGroup"
  rg_name  = "aks"
  location = "East US"
}

module "logs-rg" {
  source   = "./ResourceGroup"
  rg_name  = "logs"
  location = "East US"
}

module "monitoring-rg" {
  source   = "./ResourceGroup"
  rg_name  = "monitoring"
  location = "East US"
}


###############
#RBAC Modules #
###############
/* #Create User Assigned Identity
module "UserAssignedIdentity" {
  source              = "./Identity/UserAssignedIdentity"
  resource_group_name = module.storage-rg.rg_name_out
  location            = "East US"
  uai_name            = "uaitest"
} */

#Create RBAC
module "RoleAssignment" {
  source               = "./Identity/RoleAssignment"
  scope                = data.azurerm_subscription.primary.id
  principal_id         = "43e31da6-d3ff-45fe-98a1-8547452bcf04" #"2ab58685-eb2b-47b8-a581-1c90ed9c2c75"
  role_definition_name = "Key Vault Administrator"
  depends              = [module.Pharma-keyvault.key_vault_id]
}

####################
#Key Vault Modules #
####################

#Create Key Vault
module "Pharma-keyvault" {
  source                          = "./AzureKeyVault"
  resource_group_name             = module.platform-rg.rg_name_out
  location                        = "East US"
  key_vault_name                  = "pharmakv"
  sku_name                        = "standard"
  enabled_for_deployment          = false
  enabled_for_disk_encryption     = false
  enabled_for_template_deployment = false
  enable_rbac_authorization       = true
  soft_delete_enabled             = true
  soft_delete_retention_days      = 7
  role_definition_name            = "Key Vault Administrator"

  network_acls = {
    bypass         = "AzureServices" #"None"
    default_action = "Allow"         #"Deny"
    #ip_rules       = ["40.10.2.4", "40.10.2.5", "102.190.233.109"]
  }

  access_policy = {
    object_id               = var.client_id
    certificate_permissions = ["Create", "Get", "Import", "List", "Update", "Delete", "DeleteIssuers", "GetIssuers", "ListIssuers", "ManageContacts", "ManageIssuers", "SetIssuers"]
    key_permissions         = ["Create", "Get", "Import", "List", "Update", "Backup", "Decrypt", "Delete", "Purge", "Recover", "Restore", "Sign", "UnwrapKey", "Verify", "WrapKey"]
    secret_permissions      = ["Get", "List", "Set", "Backup", "Delete", "Purge", "Recover", "Restore"]
  }
}

#Create Key Vault Secret
module "Pharma-keyvault-secret" {
  source          = "./AzureKeyVault/VaultSecret"
  secret_name     = "pharmasecret"
  secret_value    = base64encode("testvalue") # base64encode(file(""./AzureKeyVault/Vaultsecret/emam-fun.pfx""))
  key_vault_id    = module.Pharma-keyvault.key_vault_id
  role_assignment = module.Pharma-keyvault.role_assignment_id
}

#Create Key Vault Key
module "Pharma-keyvault-key" {
  source          = "./AzureKeyVault/VaultKey"
  key_vault_id    = module.Pharma-keyvault.key_vault_id
  key_name        = "pharmakey"
  key_type        = "RSA"
  key_size        = 2048
  role_assignment = module.Pharma-keyvault.role_assignment_id
}

#Import Certificate Vault Certificate
module "Pharma-keyvault-importcert" {
  source                = "./AzureKeyVault/Vaultcertificate-import"
  key_vault_id          = module.Pharma-keyvault.key_vault_id
  certificate_to_import = filebase64("./AzureKeyVault/Vaultcertificate-import/emam-fun.pfx")
  cert_name             = "pharmacert"
  cert_password         = 123
  role_assignment       = module.Pharma-keyvault.role_assignment_id
}
/* 
#Create Certificate Vault Certificate
module "Pharma-keyvault-genracert" {
  source             = "./AzureKeyVault/Vaultcertificate-generate"
  key_vault_id       = module.Pharma-keyvault.key_vault_id
  cert_name          = base64encode("pharmacertgenra")
  days_before_expiry = 30
  content_type       = "application/x-pkcs12"
  extended_key_usage = ["1.3.6.1.5.5.7.3.1"]
  sans               = ["internal.emam.fun", "*.emam.fun"]
  emails             = ["emam@pharma.org", "mohamed@pharma.org"]
  common_name        = "CN=pharma-cert"
  validity           = 24
  key_properties = {
    exportable = true
    key_size   = 2048
    key_type   = "RSA"
    reuse_key  = true
  }
  role_assignment = module.Pharma-keyvault.role_assignment_id
}


##########################
#Storage Account Modules #
##########################

# Create Pharma storage account
module "PharmaSA" {
  source                   = "./StorageAccount"
  resource_group_name      = module.storage-rg.rg_name_out
  location                 = "East US"
  account_tier             = "Standard"  #or "Premium"
  account_kind             = "StorageV2" #or "BlobStorage", "BlockBlobStorage", "FileStorage", "Storage"
  access_tier              = "Hot"       #or "Cool"
  account_replication_type = "GRS"       #or "LRS", "RAGRS", "ZRS", "GZRS", "RAGZRS"
  base_name                = "storagepharma"
  delete_retention_policy  = 365
}

# Create Pharma storage account blob
module "PharmaSA-Blob" {
  source                            = "./StorageAccount/BlobStorage"
  resource_group_name               = module.storage-rg.rg_name_out
  location                          = "East US"
  storage_account_name              = module.PharmaSA.stg_act_name_out
  storage_account_id                = module.PharmaSA.storage_account_id
  container_name                    = "PharmaSABlob"
  blob_name                         = "PharmaSABlob"
  backup_vault_name                 = "PharmaSA-backup-vault"
  backup_policy_blob_name           = "PharmaSA-backup-policy"
  backup_instance_blob_storage_name = "PharmaSA-backup-instance"
  container_access_type             = "private"
  vault_datastore_type              = "VaultStore"
  vault_redundancy                  = "GeoRedundant"
  backup_retention_duration         = "P30D"
}

# Create Pharma storage account share
module "PharmaSA-Share" {
  source               = "./StorageAccount/ShareStorage"
  resource_group_name  = module.storage-rg.rg_name_out
  location             = "East US"
  storage_account_name = module.PharmaSA.stg_act_name_out
  storage_account_id   = module.PharmaSA.storage_account_id
  share_name           = "PharmaSAshare"
  recovery_vault_name  = "PharmaSA-recovery-vault"
  backup_policy_name   = "PharmaSA-backup-policy"
  share_quota          = 50
}

# Create Pharma storage account to archive logs for PharmaSA
module "PharmaSA-Logs" {
  source                   = "./StorageAccount"
  resource_group_name      = module.logs-rg.rg_name_out
  location                 = "East US"
  account_tier             = "Standard"  #or "Premium"
  account_kind             = "StorageV2" #or "BlobStorage", "BlockBlobStorage", "FileStorage", "Storage"
  access_tier              = "Hot"       #or "Cool"
  account_replication_type = "GRS"       #or "LRS", "RAGRS", "ZRS", "GZRS", "RAGZRS"
  base_name                = "pharmasalogs"
  delete_retention_policy  = 365
}

# Create PharmaSA-Logs blob
module "PharmaSALogs-Blob" {
  source                            = "./StorageAccount/BlobStorage"
  resource_group_name               = module.logs-rg.rg_name_out
  location                          = "East US"
  storage_account_name              = module.PharmaSA-Logs.stg_act_name_out
  storage_account_id                = module.PharmaSA-Logs.storage_account_id
  container_name                    = "pharmasalogs"
  blob_name                         = "pharmasalogsogsBlob"
  backup_vault_name                 = "pharmasalogs-backup-vault"
  backup_policy_blob_name           = "pharmasalogs-backup-policy"
  backup_instance_blob_storage_name = "pharmasalogs-backup-instance"
  container_access_type             = "private"
  vault_datastore_type              = "VaultStore"
  vault_redundancy                  = "GeoRedundant"
  backup_retention_duration         = "P30D"
}

# Create PharmaSA-Logs share
module "PharmaSALogs-Share" {
  source               = "./StorageAccount/ShareStorage"
  resource_group_name  = module.logs-rg.rg_name_out
  location             = "East US"
  storage_account_name = module.PharmaSA-Logs.stg_act_name_out
  storage_account_id   = module.PharmaSA-Logs.storage_account_id
  share_name           = "pharmasalogsshare"
  recovery_vault_name  = "pharmasalogsshare-recovery-vault"
  backup_policy_name   = "pharmasalogsshare-backup-policy"
  share_quota          = 50
}

# Create Log analytics workspace for Diagnostic Settings storage account
module "PharmaSA-LogWorkSpace" {
  source                                    = "./AzureLogging/logs"
  resource_group_name                       = module.logs-rg.rg_name_out
  location                                  = "East US"
  log_analytics                             = "pharmasa-workspace"
  log_analytics_workspace_sku               = "Standalone"
  log_analytics_workspace_retention_in_days = "90"
}

# Create Diagnostic Settings for storage account
module "PharmaSA-DiagnosticSettings" {
  source                     = "./AzureLogging/DiagnosticSettingsSA"
  resource_group_name        = module.logs-rg.rg_name_out
  location                   = "East US"
  storage_account_id         = module.PharmaSA.storage_account_id #target
  log_analytics_workspace_id = module.PharmaSA-LogWorkSpace.workspace_id
  bloblogs                   = "pharmasalogsogsBlob"
  sharelogs                  = "pharmasalogsshare"
  logs_storage_account_id    = module.PharmaSA-Logs.storage_account_id #to archive logs
}


#####################
#PostgreSQL Modules #
#####################

# Create storage account to archive PostgreSQL Logs/Diag settings
module "PharmaPostgreSQL-Logs" {
  source                   = "./StorageAccount"
  resource_group_name      = module.logs-rg.rg_name_out
  location                 = "East US"
  account_tier             = "Standard"  #or "Premium"
  account_kind             = "StorageV2" #or "BlobStorage", "BlockBlobStorage", "FileStorage", "Storage"
  access_tier              = "Hot"       #or "Cool"
  account_replication_type = "GRS"       #or "LRS", "RAGRS", "ZRS", "GZRS", "RAGZRS"
  base_name                = "pharmapostgrelogs"
  delete_retention_policy  = 365
}

# Create PostgreLogs blob
module "PostgreLogs-Blob" {
  source                            = "./StorageAccount/BlobStorage"
  resource_group_name               = module.logs-rg.rg_name_out
  location                          = "East US"
  storage_account_name              = module.PharmaPostgreSQL-Logs.stg_act_name_out
  storage_account_id                = module.PharmaPostgreSQL-Logs.storage_account_id
  container_name                    = "postgrelogs-logs"
  blob_name                         = "postgrelogs-logsBlob"
  backup_vault_name                 = "postgrelogs-backup-vault"
  backup_policy_blob_name           = "postgrelogs-backup-policy"
  backup_instance_blob_storage_name = "postgrelogs-backup-instance"
  container_access_type             = "private"
  vault_datastore_type              = "VaultStore"
  vault_redundancy                  = "GeoRedundant"
  backup_retention_duration         = "P30D"
}

# Create PostgreLogs share
module "PostgreLogs-Share" {
  source               = "./StorageAccount/ShareStorage"
  resource_group_name  = module.logs-rg.rg_name_out
  location             = "East US"
  storage_account_name = module.PharmaPostgreSQL-Logs.stg_act_name_out
  storage_account_id   = module.PharmaPostgreSQL-Logs.storage_account_id
  share_name           = "postgrelogs-share"
  recovery_vault_name  = "postgrelogs-recovery-vault"
  backup_policy_name   = "postgrelogs-backup-policy"
  share_quota          = 50
}

#Create log analytics workspace for PostgreSql Server Diagnostics settings
module "PharmaPostgreSQL-WorkSpace" {
  source                                    = "./AzureLogging/logs"
  resource_group_name                       = module.logs-rg.rg_name_out
  location                                  = "East US"
  log_analytics                             = "pharmapostgre-workspace"
  log_analytics_workspace_sku               = "Standalone"
  log_analytics_workspace_retention_in_days = "90"
}

# Create PostgreSql Server
module "Pharma-PostgreSQL" {
  source                           = "./AzureDatabases/PostgreSQL"
  resource_group_name              = module.databases-rg.rg_name_out
  location                         = "East US"
  postgre_srv_name                 = "pharma-postgre"
  admin_username                   = "postgreadmin"
  admin_password                   = "Postgre@dmin1"
  geo_redundancy_enabled           = true
  ssl_enforcement                  = true
  ssl_minimal_tls_version          = "TLS1_2"
  create_mode                      = "Default"
  sku_name                         = "GP_Gen5_4"
  postgre_version                  = 9.6
  storage_mb                       = "640000"
  auto_grow_enabled                = true
  backup_retention_days            = "7"
  threat_detection_policy          = true
  threat_policy_log_retention_days = 30
  email_addresses_for_alerts       = ["emam@pharma.org", "mohamed@pharma.org"]
  ad_admin_login_name              = "emam@pharma.org"
  logs_storage_account_id          = module.PharmaPostgreSQL-Logs.storage_account_id
  log_analytics_workspace_id       = module.PharmaPostgreSQL-WorkSpace.workspace_id
  database_name                    = "demo-postgres-db"
  charset                          = "UTF8"
  collation                        = "English_United States.1252"
  public_network_access_enabled    = true
  postgre_firewall_name            = "aksips"
  firewall_rules = {
    access-to-azure = {
      start_ip_address = "0.0.0.0"
      end_ip_address   = "0.0.0.0"
    },
    aks-ip = {
      start_ip_address = "40.10.2.4"
      end_ip_address   = "40.10.2.4"
    },
    aks-ip2 = {
      start_ip_address = "40.10.2.5"
      end_ip_address   = "40.10.2.5"
    }
  }
}


######################
#App Insight Modules #
######################

#Create log analytics workspace for the Application Insghts
module "PharmaInsight-WorkSpace" {
  source                                    = "./AzureLogging/logs"
  resource_group_name                       = module.logs-rg.rg_name_out
  location                                  = "East US"
  log_analytics                             = "pharmainsight-workspace"
  log_analytics_workspace_sku               = "Standalone"
  log_analytics_workspace_retention_in_days = "90"
}

#Create Application Insghts
module "Pharma-Insight" {
  source                              = "./AzureMonitor/AppInsights"
  resource_group_name                 = module.monitoring-rg.rg_name_out
  location                            = "East US"
  app_insight_name                    = "pharma-insight"
  application_type                    = "web"
  daily_data_cap_in_gb                = 50
  log_analytics_workspace_resource_id = module.PharmaInsight-WorkSpace.workspace_id
}


####################
#Event Hub Modules #
####################

#Create Event Hub
module "Pharma-EventHub" {
  source                  = "./AzureLogging/EventHub"
  resource_group_name     = module.logs-rg.rg_name_out
  location                = "East US"
  eventhub_namespace_name = "pharma-eventhub-namespace1"
  namespace_sku           = "Standard"
  zone_redundant          = false
  eventhub_name           = "pharma-eventhub1"
  eventhub_status         = "Active"
  partition_count         = 4
  message_retention       = 1
  namespace_capacity      = 1 
  auto_inflate_enabled               = true
  namespace_maximum_throughput_units = 10
  capture                            = true
  encoding                           = "Avro"
  event_blob_container_name          = module.PharmaEvetHub-BlobCapture.container_out
  event_storage_account_id           = module.PharmaEvetHub-Capture.storage_account_id
  log_analytics_workspace_id         = module.PharmaEventHub-LogWorkSpace.workspace_id
  eventhub_diagnostics               = "Pharmaeventhub-diag"
  network_rulesets = {
    default_action                 = "Allow" #"Deny"
    trusted_service_access_enabled = true
    #virtual_network_rule          = ["40.10.2.4", "40.10.2.5", "102.190.233.109"]
    #ip_rule                       = ["40.10.2.4", "40.10.2.5", "102.190.233.109"]
  }
  #logs_storage_account_id           = 
}

# Create Log analytics workspace for Diagnostic Settings Event Hub
module "PharmaEventHub-LogWorkSpace" {
  source                                    = "./AzureLogging/logs"
  resource_group_name                       = module.logs-rg.rg_name_out
  location                                  = "East US"
  log_analytics                             = "pharmaevethub-workspace"
  log_analytics_workspace_sku               = "Standalone"
  log_analytics_workspace_retention_in_days = "90"
}

# Create storage account to archive or keep/capture the PharmaEvetHub data 
module "PharmaEvetHub-Capture" {
  source                   = "./StorageAccount"
  resource_group_name      = module.logs-rg.rg_name_out
  location                 = "East US"
  account_tier             = "Standard"  #or "Premium"
  account_kind             = "StorageV2" #or "BlobStorage", "BlockBlobStorage", "FileStorage", "Storage"
  access_tier              = "Hot"       #or "Cool"
  account_replication_type = "GRS"       #or "LRS", "RAGRS", "ZRS", "GZRS", "RAGZRS"
  base_name                = "pharmaevethubcapture"
  delete_retention_policy  = 365
}

# Create PharmaEvetHub capture blob
module "PharmaEvetHub-BlobCapture" {
  source                            = "./StorageAccount/BlobStorage"
  resource_group_name               = module.logs-rg.rg_name_out
  location                          = "East US"
  storage_account_name              = module.PharmaEvetHub-Capture.stg_act_name_out
  storage_account_id                = module.PharmaEvetHub-Capture.storage_account_id
  container_name                    = "pharmahubblobcapture"
  blob_name                         = "pharmahubblobcapture"
  backup_vault_name                 = "pharmahubblobcapture-backup-vault"
  backup_policy_blob_name           = "pharmaevethubblobcapture-policy"
  backup_instance_blob_storage_name = "pharmaevethubblobcapture"
  container_access_type             = "private"
  vault_datastore_type              = "VaultStore"
  vault_redundancy                  = "GeoRedundant"
  backup_retention_duration         = "P30D"
}

# Create PharmaEvetHub capture share
module "PharmaEvetHub-ShareCapture" {
  source               = "./StorageAccount/ShareStorage"
  resource_group_name  = module.logs-rg.rg_name_out
  location             = "East US"
  storage_account_name = module.PharmaEvetHub-Capture.stg_act_name_out
  storage_account_id   = module.PharmaEvetHub-Capture.storage_account_id
  share_name           = "pharmaevethubcapture-share"
  recovery_vault_name  = "pharmaevethubsharecapture-recovery-vault"
  backup_policy_name   = "pharmaevethubcapture-backup-policy"
  share_quota          = 50
}


################
# VNET Modules #
################

module "Pharma-VNET" {
  source              = "./AzureNetwork/VNET"
  resource_group_name = module.network-rg.rg_name_out
  location            = "East US"
  vnet_name           = "pharma-vnet"
  address_space       = ["10.0.0.0/16"]
  subnet_adresses     = ["10.0.1.0/24","10.0.2.0/24","10.0.3.0/24"]
  subnet_names        = ["subnet1","subnet2","subnet3"]
  service_endpoints   = [["Microsoft.AzureCosmosDB"],[""] , [""]]
}


####################
# CosmosDB Modules #
####################

module "Pharma-CosmosDB" {
  source = "./AzureDatabases/CosmosDB"
  name                               = "cosmosdb"
  resource_group_name                = module.databases-rg.rg_name_out
  location                           = "East US"
  kind                               = "MongoDB"
  capabilities                       = ["DisableRateLimitingResponses"]
  failover_location                  = "East US"
  mongo_server_version               = 3.6
  enable_automatic_failover          = true
  zone_redundant                     = false
  enable_free_tier                   = true
  access_key_metadata_writes_enabled = false
  public_network_access              = true
  bypass_for_azure_services          = false
  virtual_network_enabled            = true
  #bypass_resources_ids              = [""]
  ip_range_filter                    = ["51.4.229.218", "139.217.8.252", "52.244.48.71", "104.42.195.92" , "40.76.54.131" , "52.176.6.30" , "52.169.50.45" , "52.187.184.26"]
  virtual_network_rule = {
    vnet_subnet_ids                  = module.Pharma-VNET.vnet_subnets[0]
  }
  
  capacity = {
    total_throughput_limit = 50000
  }

  backup = {
    type = "Continuous"
    #interval_in_minutes = 60
    #retention_in_hours = 8
    #storage_redundancy = Geo
  }

  databases = {
    mydb = {
      throughput     = 400
      max_throughput = null
      collections = [
        { name = "col0", shard_key = "somekey0", throughput = 1000, max_throughput = null },
        { name = "col1", shard_key = "somekey1", throughput = null, max_throughput = null }
      ]
    }
    mydb2 = {
      throughput     = null
      max_throughput = 5000
      collections    = [{ name = "col2", shard_key = "someotherkey", throughput = null, max_throughput = null }]
    }
  }

  #diagnostics = {
  #  destination   = "cosmosdbdiag"
  #  eventhub_name = "cosmosdb-diagnosticshub",
  #  logs          = ["all"],
  #  metrics       = ["all"],
  #}
} */


##########################
# API Management Modules #
##########################

# Create APIM
module "apim" {
  source              = "./AzureAPI-Managment"
  resource_group_name = module.platform-rg.rg_name_out
  location         = "East US"
  name             = "APIM"
  sku_name         = "Premium_1"
  publisher_name   = "DevOps Team"
  publisher_email  = "devops@pharma.com"
  data_certname    = module.Pharma-keyvault-importcert.cert_name
  data_keyvault_id = module.Pharma-keyvault.key_vault_id

  gateway_hostname_configuration = [
    {
      host_name = "devops.emam.fun"
    },
  ]

  apiAndOperation = [
    {
      name           = "demo-example-api"
      display_name   = "Demo Example API"
      path           = "example"
      content_format = "swagger-link-json"
      content_value  = "http://conferenceapi.azurewebsites.net/?format=json"
    },
  ]


/*   operations = [
    {
      name           = "exampleApi"
      operation_name = "getExample"
      method         = "GET"
      url_template   = "/example"
      xml_content    = <<XML
              <policies>
                  <inbound>
            <base />
                  </inbound>
                  <backend>
                      <base />
                  </backend>
                  <outbound>
                      <base />
                  </outbound>
                  <on-error>
                      <base />
                  </on-error>
              </policies>
          XML
    },
  ] */

  named_values = [
    {
      name   = "my_value"
      value  = "my secret value"
      secret = true
    },
    {
      display_name = "My_second_value_explained"
      name         = "my_second_value"
      value        = "my not secret value"
    }
  ]

  additional_location = [
    {
      location = "eastus2"
    },
  ]

  instrumentation_key = module.PharmaAPIM-Insight.instrumentation_key
  app_insight         = module.PharmaAPIM-Insight.id
  app_insight_name    = module.PharmaAPIM-Insight.app_insight_name

  depends = [module.Pharma-keyvault, module.Pharma-keyvault-importcert, module.APIM-RoleAssignment]
}


# Create Log analytics workspace for Diagnostic Settings APIM
module "PharmaAPIM-LogWorkSpace" {
  source                                    = "./AzureLogging/logs"
  resource_group_name                       = module.logs-rg.rg_name_out
  location                                  = "East US"
  log_analytics                             = "pharmaapim-workspace"
  log_analytics_workspace_sku               = "Standalone"
  log_analytics_workspace_retention_in_days = "90"
}

# Create storage account to archive or keep APIM data
module "PharmaAPIM-SA" {
  source                   = "./StorageAccount"
  resource_group_name      = module.logs-rg.rg_name_out
  location                 = "East US"
  account_tier             = "Standard"  #or "Premium"
  account_kind             = "StorageV2" #or "BlobStorage", "BlockBlobStorage", "FileStorage", "Storage"
  access_tier              = "Hot"       #or "Cool"
  account_replication_type = "GRS"       #or "LRS", "RAGRS", "ZRS", "GZRS", "RAGZRS"
  base_name                = "pharmaapim"
  delete_retention_policy  = 365
}

# Create Diagnostic Settings for APIM
module "PharmaSA-DiagnosticSettings" {
  source              = "./AzureLogging/DiagnosticSettings"
  resource_group_name = module.logs-rg.rg_name_out
  location            = "East US"
  diag_name           = "apimdiag"
  resource_id         = module.apim.api_management_id
  logs_destinations_ids = [
    module.PharmaAPIM-SA.storage_account_id,
    module.PharmaAPIM-LogWorkSpace.workspace_id
  ]
}

#Create Application Insght for APIM
module "PharmaAPIM-Insight" {
  source               = "./AzureMonitor/AppInsights"
  resource_group_name  = module.monitoring-rg.rg_name_out
  location             = "East US"
  app_insight_name     = "apim-appinsight"
  application_type     = "web"
  daily_data_cap_in_gb = 50
}


#Create RBAC for APIM Identity to access keyvault
module "APIM-RoleAssignment" {
  source               = "./Identity/RoleAssignment"
  scope                = module.Pharma-keyvault.key_vault_id
  principal_id         = module.apim.principal_id
  role_definition_name = "Key Vault Administrator"
  depends              = [module.Pharma-keyvault.key_vault_id]
}


